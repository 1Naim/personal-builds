From 9087f4222814775628a6a699b54db328649bdfaf Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Wed, 17 Jul 2024 12:08:55 -0500
Subject: [PATCH 1/2] Add support for a battery level changed callback for
 actions and drivers

This will allow actions and drivers to react to battery level changes.
---
 src/power-profiles-daemon.c | 125 ++++++++++++++++++++++++++++++++++--
 src/ppd-action.c            |  12 ++++
 src/ppd-action.h            |   6 ++
 src/ppd-driver.c            |  12 ++++
 src/ppd-driver.h            |   5 ++
 5 files changed, 153 insertions(+), 7 deletions(-)

diff --git a/src/power-profiles-daemon.c b/src/power-profiles-daemon.c
index 73ca470..fa216dc 100644
--- a/src/power-profiles-daemon.c
+++ b/src/power-profiles-daemon.c
@@ -41,6 +41,9 @@
 #define UPOWER_DBUS_PATH                  "/org/freedesktop/UPower"
 #define UPOWER_DBUS_INTERFACE             "org.freedesktop.UPower"
 
+#define UPOWER_DBUS_DISPLAY_DEVICE_PATH   "/org/freedesktop/UPower/devices/DisplayDevice"
+#define UPOWER_DBUS_DEVICE_INTERFACE      "org.freedesktop.UPower.Device"
+
 #define LOGIND_DBUS_NAME                  "org.freedesktop.login1"
 #define LOGIND_DBUS_PATH                  "/org/freedesktop/login1"
 #define LOGIND_DBUS_INTERFACE             "org.freedesktop.login1.Manager"
@@ -82,8 +85,11 @@ typedef struct {
   GHashTable *profile_holds;
 
   GDBusProxy *upower_proxy;
+  GDBusProxy *upower_display_proxy;
   gulong upower_watch_id;
+  gulong upower_display_watch_id;
   gulong upower_properties_id;
+  gulong upower_display_properties_id;
   PpdPowerChangedReason power_changed_reason;
 
   guint logind_sleep_signal_id;
@@ -1023,8 +1029,8 @@ bus_acquired_handler (GDBusConnection *connection,
 }
 
 static void
-upower_battery_update_state_from_value (PpdApp   *data,
-                                        GVariant *battery_val)
+upower_source_update_from_value (PpdApp   *data,
+                                 GVariant *battery_val)
 {
   PpdPowerChangedReason reason;
 
@@ -1039,12 +1045,62 @@ upower_battery_update_state_from_value (PpdApp   *data,
 }
 
 static void
-upower_battery_update_state (PpdApp *data)
+upower_source_update (PpdApp *data)
 {
   g_autoptr(GVariant) battery_val = NULL;
 
   battery_val = g_dbus_proxy_get_cached_property (data->upower_proxy, "OnBattery");
-  upower_battery_update_state_from_value (data, battery_val);
+  upower_source_update_from_value (data, battery_val);
+}
+
+static void
+upower_battery_changed(PpdApp *data, gdouble level)
+{
+  g_info ("Battery level changed to %f", level);
+
+  for (guint i = 0; i < data->actions->len; i++) {
+    g_autoptr(GError) error = NULL;
+    PpdAction *action;
+
+    action = g_ptr_array_index (data->actions, i);
+
+    if (!ppd_action_battery_changed (action, level, &error)) {
+      g_warning ("failed to update action %s: %s",
+                 ppd_action_get_action_name (action),
+                 error->message);
+      g_clear_error (&error);
+      continue;
+    }
+  }
+
+  if (PPD_IS_DRIVER_CPU (data->cpu_driver)) {
+    g_autoptr(GError) error = NULL;
+
+    if (!ppd_driver_battery_changed (PPD_DRIVER (data->cpu_driver), level, &error)) {
+      g_warning ("failed to update driver %s: %s",
+                 ppd_driver_get_driver_name (PPD_DRIVER (data->cpu_driver)),
+                 error->message);
+    }
+  }
+
+  if (PPD_IS_DRIVER_PLATFORM (data->platform_driver)) {
+    g_autoptr(GError) error = NULL;
+
+    if (!ppd_driver_battery_changed (PPD_DRIVER (data->platform_driver), level, &error)) {
+      g_warning ("failed to update driver %s: %s",
+                 ppd_driver_get_driver_name (PPD_DRIVER (data->platform_driver)),
+                 error->message);
+    }
+  }
+}
+
+static void upower_battery_update  (PpdApp *data)
+{
+  g_autoptr(GVariant) val = NULL;
+
+  val = g_dbus_proxy_get_cached_property (data->upower_display_proxy, "Percentage");
+  if (val)
+    upower_battery_changed(data, g_variant_get_double (val));
 }
 
 static void
@@ -1055,12 +1111,18 @@ upower_properties_changed (GDBusProxy *proxy,
 {
   g_auto(GVariantDict) props_dict = G_VARIANT_DICT_INIT (changed_properties);
   g_autoptr(GVariant) battery_val = NULL;
+  g_autoptr(GVariant) percent_val = NULL;
 
   battery_val = g_variant_dict_lookup_value (&props_dict, "OnBattery",
                                              G_VARIANT_TYPE_BOOLEAN);
 
   if (battery_val)
-    upower_battery_update_state_from_value (data, battery_val);
+    upower_source_update_from_value (data, battery_val);
+
+  percent_val = g_variant_dict_lookup_value (&props_dict, "Percentage",
+                                             G_VARIANT_TYPE_DOUBLE);
+  if (percent_val)
+    upower_battery_changed(data, g_variant_get_double (percent_val));
 }
 
 static void
@@ -1123,7 +1185,7 @@ upower_name_owner_changed (GObject    *object,
 
   if (name_owner != NULL) {
     g_debug ("%s appeared", UPOWER_DBUS_NAME);
-    upower_battery_update_state (data);
+    upower_source_update (data);
     return;
   }
 
@@ -1163,7 +1225,42 @@ on_upower_proxy_cb (GObject *source_object,
                                             G_CALLBACK (upower_name_owner_changed),
                                             data);
 
-  upower_battery_update_state (data);
+  upower_source_update (data);
+}
+
+static void
+on_upower_display_proxy_cb (GObject *source_object,
+                            GAsyncResult *res,
+                            gpointer user_data)
+{
+  PpdApp *data = user_data;
+  g_autoptr(GDBusProxy) proxy = NULL;
+  g_autoptr(GError) error = NULL;
+
+  proxy = g_dbus_proxy_new_finish (res, &error);
+
+  if (proxy == NULL) {
+    if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+      return;
+
+    g_warning ("failed to connect to upower: %s", error->message);
+    return;
+  }
+
+  g_return_if_fail (data->upower_display_proxy == NULL);
+  data->upower_display_proxy = g_steal_pointer (&proxy);
+
+  data->upower_display_properties_id = g_signal_connect (data->upower_display_proxy,
+                                                         "g-properties-changed",
+                                                         G_CALLBACK (upower_properties_changed),
+                                                         data);
+
+  data->upower_display_watch_id = g_signal_connect (data->upower_display_proxy,
+                                                    "notify::g-name-owner",
+                                                    G_CALLBACK (upower_name_owner_changed),
+                                                    data);
+
+  upower_battery_update (data);
 }
 
 static void
@@ -1273,9 +1370,13 @@ stop_profile_drivers (PpdApp *data)
   g_ptr_array_set_size (data->actions, 0);
   g_clear_signal_handler (&data->upower_watch_id, data->upower_proxy);
   g_clear_signal_handler (&data->upower_properties_id, data->upower_proxy);
+  g_clear_signal_handler (&data->upower_display_watch_id, data->upower_display_proxy);
+  g_clear_signal_handler (&data->upower_display_properties_id, data->upower_display_proxy);
   g_clear_object (&data->cancellable);
   maybe_disconnect_object_by_data (data->upower_proxy, data);
   g_clear_object (&data->upower_proxy);
+  maybe_disconnect_object_by_data (data->upower_display_proxy, data);
+  g_clear_object (&data->upower_display_proxy);
   maybe_disconnect_object_by_data (data->cpu_driver, data);
   g_clear_object (&data->cpu_driver);
   maybe_disconnect_object_by_data (data->platform_driver, data);
@@ -1450,6 +1551,16 @@ start_profile_drivers (PpdApp *data)
                       data->cancellable,
                       on_upower_proxy_cb,
                       data);
+    g_dbus_proxy_new (data->connection,
+                      G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START |
+                      G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS,
+                      NULL,
+                      UPOWER_DBUS_NAME,
+                      UPOWER_DBUS_DISPLAY_DEVICE_PATH,
+                      UPOWER_DBUS_DEVICE_INTERFACE,
+                      data->cancellable,
+                      on_upower_display_proxy_cb,
+                      data);
   } else {
     g_debug ("No battery state monitor required by any driver, let's skip it");
   }
diff --git a/src/ppd-action.c b/src/ppd-action.c
index 68596db..aab7ba7 100644
--- a/src/ppd-action.c
+++ b/src/ppd-action.c
@@ -161,6 +161,18 @@ gboolean ppd_action_power_changed (PpdAction             *action,
   return PPD_ACTION_GET_CLASS (action)->power_changed (action, reason, error);
 }
 
+gboolean ppd_action_battery_changed (PpdAction             *action,
+                                     gdouble                val,
+                                     GError               **error)
+{
+  g_return_val_if_fail (PPD_IS_ACTION (action), FALSE);
+
+  if (!PPD_ACTION_GET_CLASS (action)->battery_changed)
+    return TRUE;
+
+  return PPD_ACTION_GET_CLASS (action)->battery_changed (action, val, error);
+}
+
 const char *
 ppd_action_get_action_name (PpdAction *action)
 {
diff --git a/src/ppd-action.h b/src/ppd-action.h
index c7682ae..321a3de 100644
--- a/src/ppd-action.h
+++ b/src/ppd-action.h
@@ -20,6 +20,8 @@ G_DECLARE_DERIVABLE_TYPE (PpdAction, ppd_action, PPD, ACTION, GObject)
  * @parent_class: The parent class.
  * @probe: Called by the daemon on startup.
  * @activate_profile: Called by the daemon when the profile changes.
+ * @power_changed: Called by the daemon when the power source changes.
+ * @battery_changed: Called by the daemon when the battery level changes.
  *
  * New profile actions should derive from #PpdAction and implement
  * at least @activate_profile.
@@ -35,6 +37,9 @@ struct _PpdActionClass
   gboolean       (* power_changed)    (PpdAction                   *action,
                                        PpdPowerChangedReason        reason,
                                        GError                     **error);
+  gboolean       (* battery_changed)  (PpdAction                   *action,
+                                       gdouble                      val,
+                                       GError                     **error);
 
 };
 
@@ -42,5 +47,6 @@ struct _PpdActionClass
 PpdProbeResult ppd_action_probe (PpdAction *action);
 gboolean ppd_action_activate_profile (PpdAction *action, PpdProfile profile, GError **error);
 gboolean ppd_action_power_changed (PpdAction *action, PpdPowerChangedReason reason, GError **error);
+gboolean ppd_action_battery_changed (PpdAction *action, gdouble val, GError **error);
 const char *ppd_action_get_action_name (PpdAction *action);
 #endif
diff --git a/src/ppd-driver.c b/src/ppd-driver.c
index 9a33af3..2af4b98 100644
--- a/src/ppd-driver.c
+++ b/src/ppd-driver.c
@@ -251,6 +251,18 @@ ppd_driver_power_changed (PpdDriver              *driver,
   return PPD_DRIVER_GET_CLASS (driver)->power_changed (driver, reason, error);
 }
 
+gboolean ppd_driver_battery_changed (PpdDriver              *driver,
+                                     gdouble                val,
+                                     GError               **error)
+{
+  g_return_val_if_fail (PPD_IS_DRIVER (driver), FALSE);
+
+  if (!PPD_DRIVER_GET_CLASS (driver)->battery_changed)
+    return TRUE;
+
+  return PPD_DRIVER_GET_CLASS (driver)->battery_changed (driver, val, error);
+}
+
 gboolean
 ppd_driver_prepare_to_sleep (PpdDriver  *driver,
                              gboolean    start,
diff --git a/src/ppd-driver.h b/src/ppd-driver.h
index 8a63dd0..4eb7bf3 100644
--- a/src/ppd-driver.h
+++ b/src/ppd-driver.h
@@ -46,6 +46,7 @@ typedef enum{
  * @probe: Called by the daemon on startup.
  * @activate_profile: Called by the daemon for every profile change.
  * @power_changed: Called by the daemon when power adapter status changes
+ * @battery_changed: Called by the daemon when the battery level changes.
  *
  * New profile drivers should not derive from #PpdDriver.  They should
  * derive from the child from #PpdDriverCpu or #PpdDriverPlatform drivers
@@ -66,6 +67,9 @@ struct _PpdDriverClass
   gboolean       (* prepare_to_sleep) (PpdDriver                   *driver,
                                        gboolean                     start,
                                        GError                     **error);
+  gboolean       (* battery_changed)  (PpdDriver                   *driver,
+                                       gdouble                      val,
+                                       GError                     **error);
 };
 
 #ifndef __GTK_DOC_IGNORE__
@@ -74,6 +78,7 @@ gboolean ppd_driver_activate_profile (PpdDriver *driver,
   PpdProfile profile, PpdProfileActivationReason reason, GError **error);
 gboolean ppd_driver_power_changed (PpdDriver *driver, PpdPowerChangedReason reason, GError **error);
 gboolean ppd_driver_prepare_to_sleep (PpdDriver  *driver, gboolean start, GError **error);
+gboolean ppd_driver_battery_changed (PpdDriver *driver, gdouble val, GError **error);
 const char *ppd_driver_get_driver_name (PpdDriver *driver);
 PpdProfile ppd_driver_get_profiles (PpdDriver *driver);
 const char *ppd_driver_get_performance_degraded (PpdDriver *driver);
-- 
GitLab


From cf5669a8ffe53df766f2b1889156aaf4c34c1763 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Wed, 17 Jul 2024 12:09:14 -0500
Subject: [PATCH 2/2] amdgpu_panel_power: Add support for progressive ABM
 levels

More users use power saver as their default value than expected, and
so ABM is a more negative experience for some of them.

Instead of a table of values, use "progressive" values that change
based on battery life.

The selected values:
* Balanced + AC:
  ABM 0
* Balanced + battery:
  >= 50% battery
    ABM 0
  < 50% battery
    ABM 1
* Power Saver + AC:
  ABM 0
* Power Saver + battery:
  >= 50% battery
    ABM 0
  20-30% battery
    ABM 2
  <20% battery
    ABM 3
---
 src/ppd-action-amdgpu-panel-power.c | 30 +++++++++++++++++++++++++++--
 tests/integration_test.py           | 22 ++++++++++++++++++---
 2 files changed, 47 insertions(+), 5 deletions(-)

diff --git a/src/ppd-action-amdgpu-panel-power.c b/src/ppd-action-amdgpu-panel-power.c
index 0405804..83d26b8 100644
--- a/src/ppd-action-amdgpu-panel-power.c
+++ b/src/ppd-action-amdgpu-panel-power.c
@@ -47,6 +47,7 @@ struct _PpdActionAmdgpuPanelPower
   gint panel_power_saving;
   gboolean valid_battery;
   gboolean on_battery;
+  gdouble battery_level;
 };
 
 G_DEFINE_TYPE (PpdActionAmdgpuPanelPower, ppd_action_amdgpu_panel_power, PPD_TYPE_ACTION)
@@ -148,10 +149,20 @@ ppd_action_amdgpu_panel_update_target (PpdActionAmdgpuPanelPower  *self,
   if (self->on_battery) {
     switch (self->last_profile) {
     case PPD_PROFILE_POWER_SAVER:
-      target = 3;
+      if (!self->battery_level || self->battery_level >= 50)
+        target = 0;
+      else if (self->battery_level > 30)
+        target = 1;
+      else if (self->battery_level > 20 && self->battery_level <= 30)
+        target = 2;
+      else /* < 20 */
+        target = 3;
       break;
     case PPD_PROFILE_BALANCED:
-      target = 1;
+      if (!self->battery_level || self->battery_level >= 50)
+        target = 0;
+      else
+        target = 1;
       break;
     case PPD_PROFILE_PERFORMANCE:
       target = 0;
@@ -159,6 +170,7 @@ ppd_action_amdgpu_panel_update_target (PpdActionAmdgpuPanelPower  *self,
     }
   }
 
+  g_info("Updating panel to %d due to 🔋 %d (%f)", target, self->on_battery, self->battery_level);
   if (!set_panel_power (self, target, error))
     return FALSE;
   self->panel_power_saving = target;
@@ -204,6 +216,19 @@ ppd_action_amdgpu_panel_power_power_changed (PpdAction             *action,
   }
 
   self->valid_battery = TRUE;
+
+  return ppd_action_amdgpu_panel_update_target (self, error);
+}
+
+static gboolean
+ppd_action_amdgpu_panel_power_battery_changed (PpdAction           *action,
+                                               gdouble              val,
+                                               GError             **error)
+{
+  PpdActionAmdgpuPanelPower *self = PPD_ACTION_AMDGPU_PANEL_POWER (action);
+
+  self->battery_level = val;
+
   return ppd_action_amdgpu_panel_update_target (self, error);
 }
 
@@ -284,6 +309,7 @@ ppd_action_amdgpu_panel_power_class_init (PpdActionAmdgpuPanelPowerClass *klass)
   driver_class->probe = ppd_action_amdgpu_panel_power_probe;
   driver_class->activate_profile = ppd_action_amdgpu_panel_power_activate_profile;
   driver_class->power_changed = ppd_action_amdgpu_panel_power_power_changed;
+  driver_class->battery_changed = ppd_action_amdgpu_panel_power_battery_changed;
 }
 
 static void
diff --git a/tests/integration_test.py b/tests/integration_test.py
index 3833116..cfc7b48 100644
--- a/tests/integration_test.py
+++ b/tests/integration_test.py
@@ -1547,18 +1547,34 @@ class Tests(dbusmock.DBusTestCase):
 
         # start upower and try again
         self.stop_daemon()
-        self.start_dbus_template(
+        _, obj, _ = self.start_dbus_template(
             "upower",
             {"DaemonVersion": "0.99", "OnBattery": True},
         )
+        obj.SetupDisplayDevice(
+            2, 1, 50.0, 40.0, 80.0, 2.5, 3600, 1800, True, "half battery", 3
+        )
         self.start_daemon()
 
-        # verify balanced updated it
+        # verify balanced has it off at half battery
         self.set_dbus_property("ActiveProfile", GLib.Variant.new_string("balanced"))
+        self.assert_sysfs_attr_eventually_is(edp, amdgpu_panel_power_savings, "0")
+
+        # verify balanced turned it on when less than half battery
+        obj.SetupDisplayDevice(2, 1, 49.0, 40.0, 80.0, 2.5, 3600, 1800, True, "49%", 3)
         self.assert_sysfs_attr_eventually_is(edp, amdgpu_panel_power_savings, "1")
 
-        # verify power saver updated it
+        # switch to power saver with a large battery, make sure off
+        obj.SetupDisplayDevice(2, 1, 70, 40.0, 80.0, 2.5, 3600, 1800, True, "70%", 3)
         self.set_dbus_property("ActiveProfile", GLib.Variant.new_string("power-saver"))
+        self.assert_sysfs_attr_eventually_is(edp, amdgpu_panel_power_savings, "0")
+
+        # set power saver with less than half battery, should turn on
+        obj.SetupDisplayDevice(2, 1, 49, 40.0, 80.0, 2.5, 3600, 1800, True, "49%", 3)
+        self.assert_sysfs_attr_eventually_is(edp, amdgpu_panel_power_savings, "1")
+
+        # set power saver with very little battery, should turn on at 3
+        obj.SetupDisplayDevice(2, 1, 15, 40.0, 80.0, 2.5, 3600, 1800, True, "15%", 3)
         self.assert_sysfs_attr_eventually_is(edp, amdgpu_panel_power_savings, "3")
 
         # add another device that supports the feature
-- 
GitLab

